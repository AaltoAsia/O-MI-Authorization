swagger: "2.0"
info:
  description: "This is [O-MI Authorization](https://github.com/AaltoAsia/O-MI-Authorization/blob/master/README.md) reference implementation REST API."
  version: "1.0.0"
  title: "O-MI Authorization"
  #contact:
  #  email: ""
  #license:
  #  name: ""
  #  url: ""
host: "localhost"
basePath: "/v1"
tags:
- name: "Consumers"
  description: "Operations about consumers."
  #externalDocs:
  #  description: "Find out more"
  #  url: "http://swagger.io"
- name: "Groups/Roles"
  description: "Operations about groups/roles. Group and role has the same meaning in this context which is simply a group of consumers who has common permissions set for the group."
- name: "Permissions"
  description: "Operations about permissions."
  
consumes:
  - application/json
produces:
  - application/json

schemes:
- "http"
paths:
  /add-user:
    post:
      tags:
      - "Consumers"
      summary: "Add a new consumer"
      description: |
        Consumer consist of an identifier, which called `username` in the code.
        After adding, the consumer can be added to groups.

        **Note:** The consumer is automatically added to a group named
        `${username}_USERGROUP` and to the group `DEFAULT`.

      parameters:
      - in: "body"
        name: "body"
        description: "Parameters in json"
        required: true
        schema:
          $ref: "#/definitions/AddUser"
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid input"
  /remove-user:
    post:
      tags:
      - "Consumers"
      summary: "Remove a consumer"
      description: |
        Consumer can be removed from the system. This also removes group
        `${username}_USERGROUP` and all other data that was connected to this
        consumer only.

      parameters:
      - in: "body"
        name: "body"
        description: "Parameters in json"
        required: true
        schema:
          $ref: "#/definitions/RemoveUser"
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid input"
  /add-group:
    post:
      tags:
      - "Groups/Roles"
      summary: "Add a new group/role"
      description: |
        Creates a new empty group/role.
        A group can be connected to multiple consumers with
        [join-groups](#operation--join-groups-post).  This system does not
        impose any particular way of how to use groups. They can be thought as
        roles instead. To understand how the permissions combine when belonging
        to many groups, see
        [get-permissions](#operation--get-permissions-post).

      parameters:
      - in: "body"
        name: "body"
        description: "Parameters in json"
        required: true
        schema:
          $ref: "#/definitions/AddGroup"
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid input"
  /remove-group:
    post:
      tags:
      - "Groups/Roles"
      summary: "Remove group"
      description: |
        Removes the group and removes all data that was connected to the group,
        including permissions.

      parameters:
      - in: "body"
        name: "body"
        description: "Parameters in json"
        required: true
        schema:
          $ref: "#/definitions/RemoveGroup"
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid input"
  /join-groups:
    post:
      tags:
      - "Groups/Roles"
      summary: "Add consumer to groups / assign roles"
      description: |
        Connects a consumer to one or more groups/roles.

        To understand how the permissions combine when belonging to many
        groups, see [get-permissions](#operation--get-permissions-post).
      parameters:
      - in: "body"
        name: "body"
        description: "Parameters in json"
        required: true
        schema:
          $ref: "#/definitions/JoinGroups"
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid input"
  /leave-groups:
    post:
      tags:
      - "Groups/Roles"
      summary: "Remove consumer from groups / unassign roles"
      description: |
        Removes a connection from a consumer to one or more groups/roles.

      parameters:
      - in: "body"
        name: "body"
        description: "Parameters in json"
        required: true
        schema:
          $ref: "#/definitions/LeaveGroups"
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid input"
  /get-members:
    post:
      tags:
      - "Groups/Roles"
      summary: "Get members of a group"
      description: |
        Get all consumers who belong to the given group/assigned to role.

      parameters:
      - in: "body"
        name: "body"
        description: "Parameters in json"
        required: true
        schema:
          $ref: "#/definitions/GetMembers"
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid input"
    get:
      tags:
      - "Groups/Roles"
      summary: "Get members of a group"
      description: |
        Get all consumers who belong to the given group/assigned to role.

      parameters:
      - in: query
        name: groupname
        type: string
        description: "Group/Role identifier to be used in this operation."
        #example: "Administrators"
        required: false
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid input"

  /get-groups:
    post:
      tags:
      - "Groups/Roles"
      - "Consumers"
      summary: "Get groups/roles."
      description: |
        Get all groups/roles or groups/roles of a given consumer.

      parameters:
      - in: "body"
        name: "body"
        description: "Parameters in json"
        required: true
        schema:
          $ref: "#/definitions/GetGroups"
      responses:
        200:
          description: "Groups/roles as requested."
          schema:
            $ref: "#/definitions/GroupsResult"
        400:
          description: "Invalid input"
    get:
      tags:
      - "Groups/Roles"
      - "Consumers"
      summary: "Get groups/roles."
      description: |
        Get all groups/roles or groups/roles of a given consumer.

      parameters:
      - in: query
        name: groupname
        type: string
        description: "Group/Role identifier to be used in this operation."
        #example: "Administrators"
        required: false
      responses:
        200:
          description: "Groups/roles as requested."
          schema:
            $ref: "#/definitions/GroupsResult"
        400:
          description: "Invalid input"

  /get-users:
    post:
      tags:
      - "Groups/Roles"
      - "Consumers"
      summary: "Get consumers."
      description: |
        Get all consumers or consumers that are members of the given group /
        assigned to given role.

      parameters:
      - in: "body"
        name: "body"
        description: "Parameters in json"
        required: true
        schema:
          $ref: "#/definitions/GetUsers"
      responses:
        200:
          description: "Consumers as requested."
          schema:
            $ref: "#/definitions/UsersResult"
        400:
          description: "Invalid input"
    get:
      tags:
      - "Groups/Roles"
      - "Consumers"
      summary: "Get consumers."
      description: |
        Get all consumers or consumers that are members of the given group /
        assigned to given role.

      parameters:
      - in: query
        name: username
        type: string
        description: "Consumer identifier to be used in this operation."
        #example: "Alice"
        required: false
      responses:
        200:
          description: "Consumers as requested."
          schema:
            $ref: "#/definitions/UsersResult"
        400:
          description: "Invalid input"


          
  /set-permissions:
    post:
      tags:
      - "Permissions"
      summary: "Set permissions for group/role"
      description: |
        Set permissions for a group/role. These are seperated in allow and
        deny permissions. In O-MI Node the permissions are prosessed by first filtering the
        incoming request by allow permissions and then filtering with the deny permissions from
        the result.

        To set permissions for consumer, it either needs to be added to groups or the
        automatically created `username_USERGROUP` can be used.

      parameters:
      - in: "body"
        name: "body"
        description: "Parameters in json"
        required: true
        schema:
          $ref: "#/definitions/SetPermissions"
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid input"
  /remove-permissions:
    post:
      tags:
      - "Permissions"
      summary: "Remove permissions from group/role"
      description: ""

      parameters:
      - in: "body"
        name: "body"
        description: "Parameters in json"
        required: true
        schema:
          $ref: "#/definitions/RemovePermissions"
      responses:
        200:
          description: "OK"
        400:
          description: "Invalid input"
  /get-permissions:
    post:
      tags:
      - "Permissions"
      summary: "Get permissions of a consumer and a request type"
      description: |
        Permissions of a consumer for a request type. This operation should be
        used by O-MI Node for authorization, meaning the result is compatible
        with Authorization API service v2.

        Optianally, some extra groups can be given to be included in the
        results. This is meant for the use case where the roles are given by the
        authentication module (identity manager).

        If the consumer has connections to many groups/roles (with
        [join-groups](#operation--join-groups-post)) and they have many permissions,
        the permissions are concatenated in the following way:
        * allow permissions are combined with set union
        * deny permissions are combined with set intersection

        Hierarchical structure of the O-DF paths is taken into account when
        doing these set operations. This way the consumer, belonging to a
        certain group, can not lose any permissions in that group just by
        joining other groups.

      parameters:
      - in: "body"
        name: "body"
        description: |
          Parameters in json.
        required: true
        schema:
          $ref: "#/definitions/GetPermissions"
      responses:
        200:
          description: "Permissions aggregated for given consumer and request"
          schema:
            $ref: "#/definitions/PermissionResult"
        400:
          description: "Invalid input"
definitions:
  Request:
    type: string
    enum: [r, w, c, d]
    example: "w"
    description: |
      Select one or more requests:
      * `r` for read request
      * `w` for write request
      * `c` for call request
      * `d` for delete request

      When setting new permissions, many request types can be used by concatenating them.

  GetPermissions:
    description: >
      Permissions of a consumer for a request type. This operation is used by O-MI Node 
      for authorization. `groups` are optional.
    type: object
    required:
      - username
      - request
    properties:
      username: &username
        type: string
        example: "Alice"
        description: "Consumer identifier to be used for this operation"
      request:
        $ref: "#/definitions/Request"
      groups: &groups
        type: array
        items: &groupname
          type: string
          description: "Group/Role identifier to be used in this operation."
          example: "Administrators"
        description: "List of group/role identifiers to be used in this operation."

  PermissionResult:
    type: object 
    required:
      - allowed
      - denied
    properties:
      allowed:
        type: array 
        items: &path
          type: string 
          description: "O-DF path in the slash format `/Objects/MyObject/MyInfoItem`."
          example: "/Objects/MyObject/MyInfoItem"
        description: "Paths that are allowed for the consumer."
      denied: 
        type: array 
        items: *path
        description: "Paths that are disallowed for the consumer."

  Permission:
    type: object
    required:
      - path
      - allow
      - request
    properties:
      path: *path
      allow: &allow
        type: boolean
        example: true
        description: "Set to `true` to make an allow permission or `false` to make a deny permission."
      request:
        $ref: "#/definitions/Request"

  SetPermissions:
    type: object
    required:
      - group
      - permissions
    properties:
      group: *groupname
      permissions:
        type: array
        items:
          $ref: "#/definitions/Permission"

  RPermission:
    type: object
    required:
      - path
      - allow
    properties:
      path: *path
      allow: *allow

  RemovePermissions:
    type: object
    required:
      - group
      - permissions
    properties:
      group: *groupname
      permissions:
        type: array
        items:
          $ref: "#/definitions/RPermission"

  AddUser:
    type: object
    required:
      - username
    properties:
      username: *username

  RemoveUser:
    $ref: "#/definitions/AddUser"

  AddGroup:
    type: object
    required:
      - groupname
    properties:
      groupname: *groupname

  RemoveGroup:
    $ref: "#/definitions/AddGroup"

  JoinGroups:
    type: object
    required:
      - username
      - groups
    properties:
      username: *username
      groups: *groups

  LeaveGroups:
    $ref: "#/definitions/JoinGroups"

  GetMembers:
    type: object
    required:
      - groupname
    properties:
      groupname: *groupname

  GetGroups:
    type: object
    # no required properties
    description: |
      `username` is optional: if not given, returns all groups in the database,
      if given, it returns groups of the given user.
    properties:
      username: *username

  GetUsers:
    type: object
    # no required properties
    description: |
      `groupname` is optional: if not given, return all users in the database,
      if given, returns users in the given group.
    properties:
      groupname: *groupname

  UsersResult:
    type: array
    description: "List of consumers identifiers"
    items: *username

  GroupsResult:
    type: array
    description: "List of group/role names"
    items: *groupname

